cmake_minimum_required(VERSION 3.5)

project(A429Decoder VERSION 0.1 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

find_package(Qt6 COMPONENTS Widgets REQUIRED)

set(PROJECT_SOURCES
        a429bcdwidget.cpp
        a429bcdwidget.hpp
        a429bnrwidget.cpp
        a429bnrwidget.hpp
        a429bnrwidget.ui
        a429dwwidget.cpp
        a429dwwidget.hpp
        arinc429widget.cpp
        arinc429widget.hpp
        main.cpp
        mainwindow.cpp
        mainwindow.hpp
        a429bcdwidget.ui
        a429dwwidget.ui
        arinc429widget.ui
        mainwindow.ui
        resources.qrc
)

include_directories(../A429Library)
add_library(A429Library STATIC
            ../A429Library/a429word.hpp
            ../A429Library/a429word.cpp
            ../A429Library/a429bnrword.hpp
            ../A429Library/a429bnrword.cpp
            ../A429Library/a429bcdword.hpp
            ../A429Library/a429bcdword.cpp
          )

IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    message("macOS detected")
    # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
    # generated by CMake. This variable contains the .icns file name,
    # without the path.
    set(MACOSX_BUNDLE_ICON_FILE decode.icns)

    # And the following tells CMake where to find and install the file itself.
    set(app_icon_macos "${CMAKE_CURRENT_SOURCE_DIR}/decode.icns")

    set_source_files_properties(${app_icon_macos} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
    qt_add_executable(A429Decoder MACOSX_BUNDLE MANUAL_FINALIZATION ${PROJECT_SOURCES} ${app_icon_macos})
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    message("linux detected")
    qt_add_executable(A429Decoder MANUAL_FINALIZATION ${PROJECT_SOURCES})
ELSE()
    message("windows detected")
    qt_add_executable(A429Decoder WIN32 MANUAL_FINALIZATION ${PROJECT_SOURCES})
ENDIF()

target_link_libraries(A429Decoder PUBLIC A429Library)

# Since Qt 5.15, the CMake targets are also available as Qt::Core, Qt::Gui, and so on.
# This eases writing CMake code that can work with both Qt 5 and Qt 6.
target_link_libraries(A429Decoder PRIVATE Qt::Widgets)

set_target_properties(A429Decoder PROPERTIES
    MACOSX_BUNDLE_GUI_IDENTIFIER my.example.com
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
)


qt_finalize_executable(A429Decoder)
